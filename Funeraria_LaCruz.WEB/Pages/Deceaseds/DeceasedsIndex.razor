@attribute [Authorize(Roles = "Admin")]
@page "/deceaseds"
@using CurrieTechnologies.Razor.SweetAlert2;
@using Microsoft.AspNetCore.Authorization;

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal


<h3>Difuntos</h3>

@if (deceaseds is null)
{
    <div class="spinner" />
}
else
{

    <GenericList MyList="deceaseds">

        <Body>

            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-globe"></i> Difuntos
                        <a class="btn btn-sm btn-primary float-end" href="/deceaseds/create"><i class="oi oi-plus"></i> Adicionar Difunto</a>
                    </span>
                </div>
            </div>

            <div class="card-body">
                <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                    <div>
                        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar difunto..." @bind-value="Filter" />
                    </div>
                    <div class="mx-1">
                        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                    </div>
                </div>
            </div>

            <Pagination CurrentPage="currentPage"
                    TotalPages="totalPages"
                    SelectedPage="SelectedPage" />


            <table class="table table-striped">
                <thead>
                    <tr>
                        <td><b>Cédula</b></td>




                        <td><b>Nombre</b></td>




                        <td><b>Sexo</b></td>




                        <td><b>Nacimiento</b></td>




                        <td><b>Fecha Muerte</b></td>




                        <td><b>Causa muerte</b></td>




                        <td><b>Lugar Facellimiento</b></td>




                        <td><b>Estado civil</b></td>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var deceased in deceaseds!)
                    {
                        <tr>
                            <td>
                                @deceased.Cedula
                            </td>
                            <td>
                                @deceased.FullName
                            </td>
                            <td>
                                @deceased.Sexo
                            </td>
                            <td>
                                @deceased.Nacimiento
                            </td>
                            <td>
                                @deceased.Defuncion
                            </td>
                            <td>
                                @deceased.CausaMuerte
                            </td>
                            <td>
                                @deceased.LugarFallecimiento
                            </td>
                            <td>
                                @deceased.EstadoCivil
                            </td>
                            <td>
                                <a href="/deceaseds/edit/@deceased.Id" class="btn btn-warning">Editar</a>
                                <button class="btn btn-danger" @onclick=@(() => Delete(deceased))>Borrar</button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>

        </Body>

    </GenericList>
}

@code {
    public List<Deceased>? deceaseds { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }


    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await Load(page);
    }


    private async Task Load(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/deceaseds?page={page}";
            url2 = $"api/deceaseds/totalPages";
        }
        else
        {
            url1 = $"api/deceaseds?page={page}&filter={Filter}";
            url2 = $"api/deceaseds/totalPages?filter={Filter}";
        }


        var responseHppt = await repository.Get<List<Deceased>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        deceaseds = responseHppt.Response!;
        totalPages = responseHppt2.Response!;
    }

    private async Task Delete(Deceased deceased)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/deceaseds/{deceased.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessage();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await Load(page);
        await SelectedPage(page);
    }
}
