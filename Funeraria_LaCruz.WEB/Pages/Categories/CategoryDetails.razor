@attribute [Authorize(Roles = "Admin")]
@page "/categories/details/{Id:int}"
@using CurrieTechnologies.Razor.SweetAlert2;
@using Funeraria_LaCruz.Shared.Entities;
@using System.Net;
@using Microsoft.AspNetCore.Authorization;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (category is null)
{
    <div class="spinner" />
}
else
{
    <h3>@category.Name</h3>

    <GenericList MyList="funerariaCategories!">
        <Body>

            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-globe"></i> Sub-Categorias
                        <a class="btn btn-sm btn-primary float-end" href="/funerariaCategories/create/@category.Id"><i class="oi oi-plus"></i> Adicionar Sub-Categoria</a>
                    </span>
                </div>
            </div>

            <div class="card-body">
                <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                    <div>
                        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Sub-Categoria..." @bind-value="Filter" />
                    </div>
                    <div class="mx-1">
                        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                    </div>
                </div>
            </div>

            <Pagination CurrentPage="currentPage"
                    TotalPages="totalPages"
                    SelectedPage="SelectedPage" />


            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Sub-Categorias</th>
                        <th style="width:140px">Productos</th>
                        <th style="width:260px"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var funerariaCategory in funerariaCategories!)
                    {
                        <tr>
                            <td>
                                @funerariaCategory.Name
                            </td>
                            <td>
                                @funerariaCategory.ProductsNumber
                            </td>
                            <td>
                                <a class="btn btn-info" href="/states/details/@funerariaCategory.Id">Detalles</a>
                                <a class="btn btn-warning" href="/states/edit/@funerariaCategory.Id">Editar</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(funerariaCategory.Id))>Borrar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}

@code {
    private Category? category;
    private List<FunerariaCategory>? funerariaCategories;
    private int currentPage = 1;
    private int totalPages;


    [Parameter]
    public int Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";



    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }



    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/funerariaCategories?id={Id}&page={page}";
            url2 = $"api/funerariaCategories/totalPages?id={Id}";
        }
        else
        {
            url1 = $"api/funerariaCategories?id={Id}&page={page}&filter={Filter}";
            url2 = $"api/funerariaCategories/totalPages?id={Id}&filter={Filter}";
        }


        var responseHppt = await repository.Get<Category>($"api/categories/{Id}");
        var responseHppt2 = await repository.Get<List<FunerariaCategory>>(url1);
        var responseHppt3 = await repository.Get<int>(url2);

        category = responseHppt.Response;
        funerariaCategories = responseHppt2.Response;
        totalPages = responseHppt3.Response;

    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/funerariaCategories/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessage();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPage(page);
    }
}
